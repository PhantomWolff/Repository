<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_main</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
grav = 0.2;
hsp = 0;
hsp_carry = 0;
vsp = 0;
movespeed_normal = 3;
movespeed_powerup = 5;
jumpspeed = 8;
djump = true;
djumpspeed = 6;
grounded = 0; //Touching the ground? 0 = no, 1 = yes.
dir = 1;
character = 1;
attacking = false;
invincible = false;
hp = 3;

sprite_main = spr_player_main;  //These are for changing the player's character sets
sprite_walk = spr_player_walk;
sprite_jump = spr_player_jump;
sprite_down = spr_player_down;
sprite_attack = spr_player_warrior_attack;
sprite_hurt = spr_player_hurt;


//Other configurations
image_speed = 0.12; //Sprite animation speed
sprite_index = spr_player_main; //Make sure initial sprite is set to default
movespeed = movespeed_normal; //Set the intial movespeed
if (global.checkpointR == room) //decide to spawn on checkpoint
{
    x = global.checkpointx;
    y = global.checkpointy;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>invincible = false;
image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0.12;
sprite_index = sprite_main;
attacking = false;
with(obj_weapon)
{
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string> ///Get Player Input
key_left = keyboard_check_direct(ord('A'));
key_right = keyboard_check_direct(ord('D'));
key_jump = keyboard_check_pressed(ord('W'));
key_down = keyboard_check_direct(ord('S'));
key_change_character = keyboard_check_released(ord('C'));
key_restart_room = keyboard_check_released(ord('R'));
key_attack = keyboard_check_pressed(vk_space);


//React To Inputs
move = -key_left + key_right;
hsp = move * movespeed;

if (vsp &lt; 15) vsp += grav;

//Change Characters
if(key_change_character)
{
    if(character == 1)
    {
        sprite_main = spr_player_warrior_main;
        sprite_walk = spr_player_warrior_walk;
        sprite_jump = spr_player_warrior_jump;
        sprite_down = spr_player_warrior_down;
        sprite_hurt = spr_player_warrior_hurt;  
        character = 2;
    }
    else if(character == 2)
    {
        sprite_main = spr_player_main;
        sprite_walk = spr_player_walk;
        sprite_jump = spr_player_jump;
        sprite_down = spr_player_down;
        sprite_hurt = spr_player_hurt;
        character = 1;
    }
}

//Restart Room
if(key_restart_room)
{
    room_restart();
}

//Direction and Animation
if((!attacking))
{
    if(key_down)
    {
        sprite_index = sprite_down;
    }
    if(key_left)
    {
        dir = -1;
        if(grounded == 1) //Ensure you're grounded
        {
            sprite_index = sprite_walk;
        }
    }
    if(key_right)
    {
        dir = 1;
        if(grounded == 1) //Ensure you're grounded
        {
            sprite_index = sprite_walk;
        }
    }
    if((key_attack) &amp;&amp; (character == 2))
    {
        image_speed = 0.3;
        sprite_index = sprite_attack;
        alarm[0] = 15;
        attacking = true;
        instance_create(x,y,obj_weapon);
    }
}
image_xscale = dir; //Set the direction of the player image


move = -key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 15) vsp += grav;
if((move == 0) &amp;&amp; (grounded == 1) &amp;&amp; (!key_down) &amp;&amp; (attacking == false))
{
    sprite_index = sprite_main;
}

if (key_jump)
{

    if (place_meeting(x,y+1,obj_wall))
    {
        vsp = -jumpspeed;
        sprite_index = sprite_jump;
        audio_play_sound(snd_jump1, 3, false);
    }   
    else
    {

        if(djump) 
        {
            vsp = -djumpspeed;
            sprite_index = sprite_jump;
            djump = 0;
            audio_play_sound(snd_jump2, 3, false);
        }
    }
}


var hsp_final = hsp + hsp_carry;
hsp_carry = 0;


//Horizontal Collision
if (place_meeting(x+hsp_final,y,obj_wall)){
    while(!place_meeting(x+sign(hsp_final),y,obj_wall)){
        x += sign(hsp_final);
    }
    hsp_final = 0;
    hsp = 0;
}

x += hsp_final;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_wall)){
    while(!place_meeting(x,y+sign(vsp),obj_wall)){
        y += sign(vsp);
    }
    if (sign(vsp) == 1)
    {
        grounded = 1;
        djump = 1;
    }
    spr_index = sprite_main;
    vsp = 0;
}
else
{
    grounded = 0;
}

y += vsp;

//Collision with Enemy
if(place_meeting(x,y,obj_default_enemy) &amp;&amp; (!invincible))
{
        if((hp &lt;= 1))
        {
            scr_death();
        }
        else
        {
            alarm[1] = 100;
            invincible = true;
            audio_play_sound(snd_player_hurt, 3, false);
            image_alpha = 0.5;
            hp -= 1;
        }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,12</point>
    <point>12,12</point>
  </PhysicsShapePoints>
</object>
